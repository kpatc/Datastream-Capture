services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

    env_file:
      - .env

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    env_file:
      - .env

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - "5433:5432"  # Changed from 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecommerce
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    env_file:
      - .env

  kafka-connect:
    container_name: kafka-connect
    image: debezium/connect:2.3
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_PLUGIN_PATH: /kafka/connect
      CONNECT_DEBEZIUM_SNAPSHOT_MODE: initial
    healthcheck:
      test: curl -f http://localhost:8083/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    env_file:
      - .env

  
  spark:
    container_name: spark
    image: apache/spark:latest
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    mem_limit: 2g
    ports:
      - "8080:8080"
    volumes:
      - ./src/spark_app:/app
    command: >
      bash -c "
        apt-get update && apt-get install -y python3-pip wget &&
        pip install -r /app/requirements.txt &&
        mkdir -p /opt/spark/jars &&
        wget -P /opt/spark/jars https://repo1.maven.org/maven2/net/snowflake/snowflake-jdbc/3.14.6/snowflake-jdbc-3.14.6.jar &&
        wget -P /opt/spark/jars https://repo1.maven.org/maven2/net/snowflake/spark-snowflake_2.12/2.12.1-spark_3.4/spark-snowflake_2.12-2.12.1-spark_3.4.jar &&
        /opt/spark/bin/spark-submit \
          --jars /opt/spark/jars/snowflake-jdbc-3.14.6.jar,/opt/spark/jars/spark-snowflake_2.12-2.12.1-spark_3.4.jar \
          /app/main.py
      "
    healthcheck:
      test: curl -f http://localhost:8080/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network


  superset:
    container_name: superset
    image: apache/superset:latest
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: "secretkey"
    depends_on:
      spark:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: curl -f http://localhost:8088/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
